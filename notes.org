* What is a web server?
** A piece of software designed to accept incoming web requests
** For example, Google has many web servers
**  When we go to http://www.google.com in our browser, we send something to a web server

* What do we send?
**  When you go to http://www.google.com , you send the following
        GET / HTTP/1.1
        Host : www.google.com
*  A GET request
**  The server then sees GET / HTTP/1.1
        GET - verb
        /   - Path
        HTTP - Protocol
        1.1  - version
## That's it ,
## The servers sees that, and then there's code
## The code may interpret the GET request in many different ways.

## For example
# It may give you an error, if HTTP is not supported (for instance if it is a mail server and only configured for SMTP )
# It may give you an error, if the server is unavailable 
# It may give you HTML code back( which is what it normally does)
# It may give you some text back
# It may give you nothing back

## Going to any page in browser will do the same
chrome - GET /login HTTP/1.1
         Host: https://twitter.com

        GET /download/mac HTTP/1.1
        Host: https://git-scm.com

        GET / HTTP/1.1
        Host: https://www.google.co.in

# Differences

* The only difference is what the server on the other end reponds with
- Twitter responds with the TWitter HTML
- git-scm responds with the git-scm HTML
- google responds with the Google HTML

What else?
* Going to a page will always do a GET
because a brower is configured with GET request
* But there are many other things we can do, such as POST, DELETE, PUT, OPTIONS, HEAD, and much more
* Each server responds differently to each, but they normally have the same meaning in each

crux is HTTP Verbs

| Verb   | Meaning                                             | Example        |
|--------+-----------------------------------------------------+----------------|
| GET    | Retrieve something                                  | GET /item/1    |
| POST   | Receive data, and use it                            | POST /item     |
| PUT    | Make sure something is there (may create or update) | PUT /item      |
| DELETE | Remove something                                    | DELETE /item/1 |
|--------+-----------------------------------------------------+----------------|

* What is REST API?
** It is a way of thinking about how a web server responds to your requests
** It doesn't respond with just data
** It responds with resources

* Resources?
** Similar to object-oriented programming
** Think of the server as having resources, and each is able to interact with the pertinent request.
| Item resource--------+----------------- |             |                    |
|-----------------------------------------+-------------+--------------------|
| GET                                     | /item/chair | with some id       |
| POST                                    | /item/chair | with extra data    |
| PUT                                     | /item/chair | with extra data    |
| DELETE                                  | /item/chair |                    |
|-----------------------------------------+-------------+--------------------|
| Items                                   |             |                    |
|-----------------------------------------+-------------+--------------------|
| GET                                     | /items      | with list of items |
|-----------------------------------------+-------------+--------------------|

* Stateless
** For example
** POST /item/chair creates an item
** The server does not know the item now exists
** GET /item/chair then goes to the database and checks to see if the item is there( it can't just say whether item is there , because it doesn't saves the state)
** To get an item you do not need to have created an item before - the item could be in the database from previously

* Another example
** A user logs in to a web application ( eg. twitter )
** The web server does not know the user is logged in ( since it does not remember any state)
** What do we do?
** The web application must send enough data to identify the user in every reques, or else the server won't associate the request with the user.

